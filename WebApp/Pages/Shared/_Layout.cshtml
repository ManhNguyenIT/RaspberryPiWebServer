<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>WebApp</title>
    <link href="~/favicon.ico" rel="shortcut icon" type="image/x-icon" />

    @* Uncomment to use the HtmlEditor control *@
    @* <script src="https://unpkg.com/devextreme-quill@21_2/dist/dx-quill.min.js"></script> *@

    <link rel="stylesheet" href="~/css/vendor.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/Site.css" />
    <script src="~/js/vendor.js" asp-append-version="true"></script>

    <script src="~/js/devextreme/localization/dx.messages.en.js"></script>
    <script src="~/js/devextreme/localization/dx.messages.vi.js"></script>
    <script src="@Url.Action( "CldrData", "Localization", new { t = CldrDataScriptBuilder.GetCacheParam() })"></script>
</head>

<body>
    <div id="app-side-nav-outer-toolbar">
        <div class="layout-header">
            @(Html.DevExtreme().Toolbar()
            .Items(items => {
            items.Add()
            .Widget(w => w
            .Button()
                @*.Icon("menu")*@
            .Icon(Url.Content("~/imgs/logo.jpg"))
            .OnClick("MES.onMenuButtonClick")
            )
            .Location(ToolbarItemLocation.Before)
            .CssClass("menu-button");

            items.Add()
            .Html("<div style='text-transform:uppercase;'>kokyo tech factory vietnam co. ltd</div>")
            .Location(ToolbarItemLocation.Center)
            .CssClass("header-title");

            items.Add()
            .Widget(w => w
            .TextBox()
            .Mode(TextBoxMode.Search)
            .Visible(false)
            )
            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
            .Location(ToolbarItemLocation.After);

            items.Add()
            .Widget(w => w
            .Button()
            .Icon("globe")
            .Visible(false)
            )
            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
            .Location(ToolbarItemLocation.After);

            items.Add()
            .Widget(w => w
            .Button()
            .Icon("clock")
            .Visible(false)
            )
            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
            .Location(ToolbarItemLocation.After);

            items.Add()
            .Widget(w => w
            .SelectBox()
            .DataSource(new JS("locales"))
            .DisplayExpr("name")
            .ValueExpr("value")
            .Value(new JS("locale"))
            .OnValueChanged("changeLocale")
            .Visible(false)
            )
            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
            .Location(ToolbarItemLocation.After);
            })
            )
        </div>
        <div class="layout-body layout-body-hidden">
            @(Html.DevExtreme().Drawer()
            .ID("layout-drawer")
            .Position(DrawerPosition.Left)
            .Opened(new JS("MES.restoreDrawerOpened()"))
            .Content(@<text>
                    <div id="layout-drawer-scrollview" class="with-footer">
                        <div class="content" style="padding:10px;">
                            @RenderBody()
                        </div>
                        <div class="content-block">
                            <div class="content-footer">
                                <div id="footer">
                                    @DateTime.Now.Year &copy; Kokyo tech factory Vietnam co. ltd
                                    <br />
                                </div>
                            </div>
                        </div>
                    </div>
                </text>)
            .Template(new TemplateName("navigation-menu"))
            )
        </div>
    </div>

    @using (Html.DevExtreme().NamedTemplate("navigation-menu"))
    {
        <div class="menu-container dx-swatch-additional">

            @functions {
            string GetUrl(string action) => Url.Action(action);
            string GetCurrentUrl() => Url.Action(ViewContext.RouteData.Values["action"]?.ToString() ?? "");
            bool IsCurrentUrl(string pageName) => GetUrl(pageName).ToLower() == GetCurrentUrl().ToLower();
        }

        @(Html.DevExtreme().TreeView()
        .ID("TreeView-Menu")
        .Items(items => {
        items.Add()
        .Text("Chương trình chính")
        .Icon("home")
        .Option("path", "/main")
        .Selected(IsCurrentUrl("main"));

        items.Add()
        .Text("Báo cáo")
        .Icon("print")
        .Visible(false)
        .Expanded(IsCurrentUrl("Input") || IsCurrentUrl("Output"))
        .Items(subItems =>
        {
        subItems.Add()
        .Text("Monitor IO")
        .Icon("preferences")
        .Option("path", "Input")
        .Selected(IsCurrentUrl("Input"));

        subItems.Add()
        .Text("Output")
        .Icon("isblank")
        .Visible(false)
        .Option("path", GetUrl("Output"))
        .Selected(IsCurrentUrl("Output"));
        });

        items.Add()
        .Text("Báo cáo")
        .Icon("print")
        .Option("path", "report")
        .Selected(IsCurrentUrl("Report"));

        items.Add()
        .Text("Monitor IO")
        .Icon("preferences")
        .Option("path", "monitor")
        .Selected(IsCurrentUrl("Monitor"));

        items.Add()
        .Text("Storage - Export")
        .Icon("floppy")
        .Visible(false)
        .Option("path", GetUrl("StorageExport"))
        .Selected(IsCurrentUrl("StorageExport"));

        items.Add()
        .Text("Maintenance")
        .Icon("toolbox")
        .Visible(false)
        .Expanded(IsCurrentUrl("Register") || IsCurrentUrl("History"))
        .Items(subItems =>
        {
        subItems.Add()
        .Text("Register")
        .Icon("isblank")
        .Visible(false)
        .Option("path", GetUrl("Register"))
        .Selected(IsCurrentUrl("Register"));

        subItems.Add()
        .Text("History")
        .Icon("isblank")
        .Visible(false)
        .Option("path", GetUrl("History"))
        .Selected(IsCurrentUrl("History"));
        });

        items.Add()
        .Text("Setting")
        .Icon("preferences")
        .Visible(false)
        .Option("path", GetUrl("Setting"))
        .Selected(IsCurrentUrl("Setting"));

        items.Add()
        .Text("About")
        .Icon("info")
        .Visible(false)
        .Option("path", GetUrl("About"))
        .Selected(IsCurrentUrl("About"));


        items.Add()
        .Text("Profile")
        .Icon("user")
        .Visible(false)
        .Expanded(IsCurrentUrl("SignUp")|| IsCurrentUrl("Login"))
        .Items(subItems =>
        {
        subItems.Add()
        .Visible(false)
        .Text("SignUp")
        .Icon("isblank");

        subItems.Add()
        .Visible(false)
        .Text("Login")
        .Icon("isblank");
        });

        })
        .ExpandEvent(TreeViewExpandEvent.Click)
        .SelectionMode(NavSelectionMode.Single)
        .SelectedExpr("selected")
        .FocusStateEnabled(false)
        .Width(250)
        .OnItemClick("MES.onTreeViewItemClick")
        )
    </div>
    }
    @(Html.DevExtreme().Popup()
    .ID("login-popup")
    .Width("auto")
    .Height("auto")
    .ShowTitle(false)
    .ShowCloseButton(false)
    .Shading(true)
    .Title("Login")
    .Visible(false)
    .DragEnabled(false)
    .CloseOnOutsideClick(true)
    .ContentTemplate(new TemplateName("login-popup-template"))
    )

    @using (Html.DevExtreme().NamedTemplate("login-popup-template"))
    {
        <style>
            .container {
                background: transparent;
                -webkit-box-shadow: 0 11px 15px -7px rgb(0 0 0 / 20%), 0 24px 38px 3px rgb(0 0 0 / 14%), 0 9px 46px 8px rgb(0 0 0 / 12%);
                box-shadow: 0 11px 15px -7px rgb(0 0 0 / 20%), 0 24px 38px 3px rgb(0 0 0 / 14%), 0 9px 46px 8px rgb(0 0 0 / 12%);
            }

            .dx-popup-wrapper > .dx-overlay-content {
                background: transparent;
                box-shadow: unset;
            }

            h2 {
                text-align: center;
            }

            p {
                font-size: 14px;
                font-weight: 100;
                line-height: 20px;
                letter-spacing: 0.5px;
                margin: 20px 0 30px;
            }

            span {
                font-size: 12px;
            }

            a {
                color: #333;
                font-size: 14px;
                text-decoration: none;
                margin: 15px 0;
            }

            button {
                border-radius: 20px;
                border: 1px solid #FF4B2B;
                background-color: #FF4B2B;
                color: #FFFFFF;
                font-size: 12px;
                font-weight: bold;
                padding: 12px 45px;
                letter-spacing: 1px;
                text-transform: uppercase;
                transition: transform 80ms ease-in;
            }

                button:active {
                    transform: scale(0.95);
                }

                button:focus {
                    outline: none;
                }

                button.ghost {
                    background-color: transparent;
                    border-color: #FFFFFF;
                }

            form {
                background-color: #FFFFFF;
                display: flex;
                align-items: center;
                justify-content: center;
                flex-direction: column;
                padding: 0 50px;
                height: 100%;
                text-align: center;
            }

            input {
                background-color: #eee;
                border: none;
                padding: 12px 15px;
                margin: 8px 0;
                width: 100%;
            }

            .container {
                background-color: #fff;
                border-radius: 10px;
                box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);
                position: relative;
                overflow: hidden;
                width: 768px;
                max-width: 100%;
                min-height: 480px;
            }

            .form-container {
                position: absolute;
                top: 0;
                height: 100%;
                transition: all 0.6s ease-in-out;
            }

            .sign-in-container {
                left: 0;
                width: 50%;
                z-index: 2;
            }

            .container.right-panel-active .sign-in-container {
                transform: translateX(100%);
            }

            .sign-up-container {
                left: 0;
                width: 50%;
                opacity: 0;
                z-index: 1;
            }

            .container.right-panel-active .sign-up-container {
                transform: translateX(100%);
                opacity: 1;
                z-index: 5;
                animation: show 0.6s;
            }

            @@keyframes show {
                0%, 49.99% {
                    opacity: 0;
                    z-index: 1;
                }

                50%, 100% {
                    opacity: 1;
                    z-index: 5;
                }
            }

            .overlay-container {
                position: absolute;
                top: 0;
                left: 50%;
                width: 50%;
                height: 100%;
                overflow: hidden;
                transition: transform 0.6s ease-in-out;
                z-index: 100;
            }

            .container.right-panel-active .overlay-container {
                transform: translateX(-100%);
            }

            .overlay {
                background: #FF416C;
                background: -webkit-linear-gradient(to right, #FF4B2B, #FF416C);
                background: linear-gradient(to right, #FF4B2B, #FF416C);
                background-repeat: no-repeat;
                background-size: cover;
                background-position: 0 0;
                color: #FFFFFF;
                position: relative;
                left: -100%;
                height: 100%;
                width: 200%;
                transform: translateX(0);
                transition: transform 0.6s ease-in-out;
            }

            .container.right-panel-active .overlay {
                transform: translateX(50%);
            }

            .overlay-panel {
                position: absolute;
                display: flex;
                align-items: center;
                justify-content: center;
                flex-direction: column;
                padding: 0 40px;
                text-align: center;
                top: 0;
                height: 100%;
                width: 50%;
                transform: translateX(0);
                transition: transform 0.6s ease-in-out;
            }

            .overlay-left {
                transform: translateX(-20%);
            }

            .container.right-panel-active .overlay-left {
                transform: translateX(0);
            }

            .overlay-right {
                right: 0;
                transform: translateX(0);
            }

            .container.right-panel-active .overlay-right {
                transform: translateX(20%);
            }

            .social-container {
                margin: 20px 0;
            }

                .social-container a {
                    border: 1px solid #DDDDDD;
                    border-radius: 50%;
                    display: inline-flex;
                    justify-content: center;
                    align-items: center;
                    margin: 0 5px;
                    height: 40px;
                    width: 40px;
                }
        </style>
        <div class="container" id="container">
            <div class="form-container sign-up-container">
                <form action="#">
                    <h1>Create Account</h1>
                    <input type="text" placeholder="Name" />
                    <input type="email" placeholder="Email" />
                    <input type="password" placeholder="Password" />
                    <button>Sign Up</button>
                </form>
            </div>
            <div class="form-container sign-in-container">
                <form action="#">
                    <h1>Sign in</h1>
                    <input type="email" placeholder="Email" />
                    <input type="password" placeholder="Password" />
                    <a href="#">Forgot your password?</a>
                    <button>Sign In</button>
                </form>
            </div>
            <div class="overlay-container">
                <div class="overlay">
                    <div class="overlay-panel overlay-left">
                        <h1>Welcome Back!</h1>
                        <p>To keep connected with us please login with your personal info</p>
                        <button class="ghost" id="signIn">Sign In</button>
                    </div>
                    <div class="overlay-panel overlay-right">
                        <h1>Hello, Friend!</h1>
                        <p>Enter your personal details and start journey with us</p>
                        <button class="ghost" id="signUp">Sign Up</button>
                    </div>
                </div>
            </div>
        </div>
        <script>
            const signUpButton = document.getElementById('signUp');
            const signInButton = document.getElementById('signIn');
            const container = document.getElementById('container');

            signUpButton.addEventListener('click', () => {
                container.classList.add("right-panel-active");
            });

            signInButton.addEventListener('click', () => {
                container.classList.remove("right-panel-active");
            });
        </script>
    }

    <script>
        Globalize.locale(navigator.language);
        let MES = (function () {

            let DRAWER_OPENED_KEY = "MES-drawer-opened";

            let breakpoints = {
                xSmallMedia: window.matchMedia("(max-width: 599.99px)"),
                smallMedia: window.matchMedia("(min-width: 600px) and (max-width: 959.99px)"),
                mediumMedia: window.matchMedia("(min-width: 960px) and (max-width: 1279.99px)"),
                largeMedia: window.matchMedia("(min-width: 1280px)")
            };

            function getDrawer() {
                return $("#layout-drawer").dxDrawer("instance");
            }

            function restoreDrawerOpened() {
                let isLarge = breakpoints.largeMedia.matches;
                if (!isLarge)
                    return false;

                let state = sessionStorage.getItem(DRAWER_OPENED_KEY);
                if (state === null)
                    return isLarge;

                return state === "true";
            }

            function saveDrawerOpened() {
                sessionStorage.setItem(DRAWER_OPENED_KEY, getDrawer().option("opened"));
            }

            function updateDrawer() {
                let isXSmall = breakpoints.xSmallMedia.matches,
                    isLarge = breakpoints.largeMedia.matches;

                getDrawer().option({
                    openedStateMode: isLarge ? "shrink" : "overlap",
                    revealMode: isXSmall ? "slide" : "expand",
                    minSize: isXSmall ? 0 : 60,
                    shading: !isLarge,
                });
            }

            function init() {
                $("#layout-drawer-scrollview").dxScrollView({ direction: "vertical" });

                $.each(breakpoints, function (_, size) {
                    size.addListener(function (e) {
                        if (e.matches)
                            updateDrawer();
                    });
                });

                updateDrawer();

                $('.layout-body').removeClass('layout-body-hidden');
            }

            function navigate(url, delay) {
                if (url)
                    setTimeout(function () { location.href = url }, delay);
            }

            function onMenuButtonClick() {
                getDrawer().toggle();
                saveDrawerOpened();
                $("#TreeView-Menu").dxTreeView("instance").collapseAll();
            }

            function onTreeViewItemClick(e) {
                if (e.itemData.text === "Login") {
                    $("#login-popup").dxPopup("instance").show();
                    return;
                } else if (e.itemData.text === "SignUp") {
                    $("#login-popup").dxPopup("instance").show();
                    document.getElementById('signUp').click();
                    return;
                }
                let drawer = getDrawer();
                let savedOpened = restoreDrawerOpened();
                let actualOpened = drawer.option("opened");

                if (!actualOpened) {
                    drawer.show();
                } else {
                    let willHide = !savedOpened || !breakpoints.largeMedia.matches;
                    let willNavigate = !e.itemData.selected;

                    if (willHide)
                        drawer.hide();

                    if (willNavigate)
                        navigate(e.itemData.path, willHide ? 400 : 0);
                }
            }

            return {
                init: init,
                restoreDrawerOpened: restoreDrawerOpened,
                onMenuButtonClick: onMenuButtonClick,
                onTreeViewItemClick: onTreeViewItemClick
            };
        })();

        document.addEventListener("DOMContentLoaded", function documentReady() {
            this.removeEventListener("DOMContentLoaded", documentReady);
            MES.init();
        });

        let formatMessage = Globalize.formatMessage.bind(Globalize);
        let locales = [
            { name: "English", value: "en" },
            { name: "Tiếng Việt", value: "vi" }
        ];
        let locale = getLocale();
        Globalize.locale(locale);
        function changeLocale(data) {
            setLocale(data.value);
            document.location.reload();
        }
        function getLocale() {
            let locale = sessionStorage.getItem("locale");
            return locale != null ? locale : "en";
        }
        function setLocale(locale) {
            sessionStorage.setItem("locale", locale);
        }
    </script>

    @await RenderSectionAsync("Scripts", required: false)
</body>

</html>